<?php

namespace AppBundle\Repository;

/**
 * CompanyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class  CompanyRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Get Skill use in one company
     * @param $companyId
     * @return mixed
     */
    public function getSkillInCompagny($companyId)
    {
        $qb = $this
            ->createQueryBuilder('c')
            ->select([ '(avg(us.level)) as level', 'count(s.nameSkill) as nbSalary', 's.nameSkill as nameSkill'])
            ->join('c.users', 'u')
            ->join('u.userskills', 'us')
            ->join('us.skill', 's')
            ->orderBy('nbSalary', "desc")
            ->addOrderBy('level', "desc")
            ->setParameter('idCompany', $companyId)
            ->groupBy('s.nameSkill')
//            ->setMaxResults(5)
             ->where('c.id=:idCompany')
            ->getQuery();
        return $qb->getResult();
    }

    /**
     * Get the Referent HappySens for one company
     * @param $companyId
     * @return mixed
     */
    public function getReferentHappySens($companyId)
    {
       $qb = $this->createQueryBuilder('c')
           ->select('u.firstName', 'u.lastName', 'u.slug', 'u.email as email')
           ->join('c.users', 'u')
           ->setParameter('idCompany', $companyId)
           ->where('c.id=:idCompany')
           ->andWhere('u.status=2')
           ->getQuery();
        return $qb->getResult();
    }

    /**
     * For one company get all Projects this company
     * @param $companyId
     * @return mixed
     */
    public function getProjectsInCompany($companyId)
    {
        $qb = $this
            ->createQueryBuilder('c')
            ->join('c.users', 'u')
            ->join('u.authorProject', 'p')
            ->select('p.title', 'p.startingDate', 'p.endDate', 'p.presentation', 'p.profit', 'p.beneficeCompany', 'p.status', 'p.photo as photoProject', 'p.location', 'p.slug as projectSlug', 'u.firstName', 'u.lastName', 'u.photo', 'u.slug', 'p.id', 'u.id as authorProject')
            ->setParameter('idCompany', $companyId)
            ->where('c.id=:idCompany')
            ->getQuery();
        return $qb->getResult();
    }

    /**
     * Count the number of company in database
     * @return mixed
     */
    public function getNumberCompany()
    {
        $qb = $this
            ->createQueryBuilder('c')
            ->select('COUNT(c)')
            ->getQuery();
        return $qb->getResult();

    }

    /**
     * Return number of collaborator has actif in one company
     * @param $companyId
     * @return mixed
     */
    public function getNumberCollaboratorHasActif($companyId)
    {
        $qb = $this
            ->createQueryBuilder('c')
            ->join('c.users', 'u')
            ->select('Count(u) as nbActifCollaborator')
            ->setParameter('idCompany', $companyId)
            ->where('c.id=:idCompany')
            ->andwhere('u.isActive = true')
            ->getQuery();
        return $qb->getResult();
    }

    /**
     * @param $companyId
     * @return array
     */
    public function getAllCollaboratorInCompany($companyId)
    {
        $qb = $this
            ->createQueryBuilder('c')
            ->join('c.users', 'u')
            ->select('u.firstName', 'u.lastName', 'u.photo', 'u.slug', 'u.mood')
            ->setParameter('idCompany', $companyId)
            ->where('c.id=:idCompany')
            ->andwhere('u.isActive = true')
            ->getQuery();
        return $qb->getResult();
    }

    /**
     * @return array
     */
    public function findAllForRecap() {
        $qb = $this
            ->createQueryBuilder('c')
            ->select('c.id', 'c.name', 'c.logo', 'c.slug')
            ->getQuery();
        return $qb->getResult();
    }

    /**
     * @param $text
     * @return mixed
     */
    public function getSlugIsUnique($text) {
        $text = $text . '%';
        $qb = $this
            ->createQueryBuilder('c')
            ->setParameter('slug', $text)
            ->select('count(c)')
            ->where('c.slug LIKE :slug')
            ->getQuery();
        return $qb->getSingleScalarResult();
    }

}
